/*	CASA Lib for ActionScript 3.0	Copyright (c) 2010, Aaron Clinger & Contributors of CASA Lib	All rights reserved.		Redistribution and use in source and binary forms, with or without	modification, are permitted provided that the following conditions are met:		- Redistributions of source code must retain the above copyright notice,	  this list of conditions and the following disclaimer.		- Redistributions in binary form must reproduce the above copyright notice,	  this list of conditions and the following disclaimer in the documentation	  and/or other materials provided with the distribution.		- Neither the name of the CASA Lib nor the names of its contributors	  may be used to endorse or promote products derived from this software	  without specific prior written permission.		THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"	AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE	IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE	ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE	LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR	CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF	SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS	INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN	CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)	ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE	POSSIBILITY OF SUCH DAMAGE.*/package org.casalib.math; 	import org.casalib.math.Percent;		/**		Creates a standardized way of describing and storing an extent of variation/a value range.				@author Aaron Clinger		@author Mike Creighton		@version 03/26/10	*/	class Range  {				inline public var end(getEnd, setEnd) : Float;		inline public var max(getMax, null) : Float ;		inline public var min(getMin, null) : Float ;		inline public var start(getStart, setStart) : Float;		var _end:Float;		var _start:Float;						/**			Creates and defines a Range object.						@param start: Beginning value of the range.			@param end: Ending value of the range.			@usageNote You are not required to define the range in the contructor you can do it at any point by calling {@link #setRange}.		*/		public function new(start:Float, end:Float) {			this.setRange(start, end);		}				/**			Defines or redefines range.						@param start: Beginning value of the range.			@param end: Ending value of the range.		*/		inline public function setRange(start:Float, end:Float):Void {			this.start = start;			this.end   = end;		}				/**			The start value of the range.		*/		inline private function getStart():Float{			return this._start;		}				inline private function setStart(value:Float):Float{			this._start = value;			return value;		}				/**			The end value of the range.		*/		inline private function getEnd():Float{			return this._end;		}				inline private function setEnd(value:Float):Float{			this._end = value;			return value;		}				/**			The minimum or smallest value of the range.		*/		inline private function getMin():Float {			return Math.min(this.start, this.end);		}				/**			The maximum or largest value of the range.		*/		inline private function getMax():Float {			return Math.max(this.start, this.end);		}				/**			Determines if value is included in the range including the range's start and end values.						@return Returns <code>true</code> if value was included in range; otherwise <code>false</code>.		*/		inline public function isWithinRange(value:Float):Bool {			return (value <= this.max && value >= this.min);		}				/**			Calculates the percent of the range.						@param percent: A {@link Percent} object.			@return The value the percent represent of the range.		*/		inline public function getValueOfPercent(percent:Percent):Float {			var min:Float;			var max:Float;			var val:Float;			var per:Percent = percent.clone();						if (this.start <= this.end) {				min = this.start;				max = this.end;			} else {				per.decimalPercentage = 1 - per.decimalPercentage;								min = this.end;				max = this.start;			}						val = Math.abs(max - min) * per.decimalPercentage + min;						return val;		}				/**			Returns the percentage the value represents out of the range.						@param value: An integer.			@return A Percent object.		*/		inline public function getPercentOfValue(value:Float):Percent {			return new Percent((value - this.min) / (this.max - this.min));		}				/**			Determines if the range specified by the <code>range</code> parameter is equal to this range object.						@param percent: A Range object.			@return Returns <code>true</code> if ranges are identical; otherwise <code>false</code>.		*/		inline public function equals(range:Range):Bool {			return this.start == range.start && this.end == range.end;		}				/**			Determines if this range and the range specified by the <code>range</code> parameter overlap.						@param A Range object.			@return Returns <code>true</code> if this range contains any value of the range specified; otherwise <code>false</code>.		*/		inline public function overlaps(range:Range):Bool {			return (this.equals(range) || this.contains(range) || range.contains(this) || this.isWithinRange(range.start) || this.isWithinRange(range.end));		}				/**			Determines if this range contains the range specified by the <code>range</code> parameter.						@param A Range object.			@return Returns <code>true</code> if this range contains all values of the range specified; otherwise <code>false</code>.		*/		inline public function contains(range:Range):Bool {			return this.start <= range.start && this.end >= range.end;		}				/**			@return A new range object with the same values as this range.		*/		inline public function clone():Range {			return new Range(this.start, this.end);		}	}